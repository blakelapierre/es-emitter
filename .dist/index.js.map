{"version":3,"names":[],"mappings":"","sources":["index.js"],"sourcesContent":["module.exports = () => {\n  return listenerInterceptor => {\n    var events = {};\n\n    return {\n      emit: (...args) => emit(events, ...args),\n      on: (...args) => on(events, listenerInterceptor, ...args),\n      off: (...args) => off(events, ...args)\n    };\n  };\n\n  function emit(events, event) {\n    var listeners = events[event] || [],\n        args = Array.prototype.slice.call(arguments, 2);\n\n    for (var i = 0; i < listeners.length; i++) {\n      listeners[i].apply(null, args);\n    }\n  }\n\n  function on(events, listenerInterceptor, event, listener) {\n    if (typeof event == 'object') {\n      var unregister = () => _.each(unregister, fn => fn());\n      return _.transform(event, (result, listener, eventName) => {\n        result[eventName] = on(events, listenerInterceptor, eventName, listener);\n      }, unregister);\n    }\n\n    if (listenerInterceptor) {\n      var ret = listenerInterceptor.attemptIntercept(event, listener);\n      if (ret) return ret;\n    }\n\n    events[event] = events[event] || [];\n    events[event].push(listener);\n\n    return () => off(events, event, listener);\n  }\n\n  function off(events, event, listener) {\n    if (typeof event == 'object') {\n      for (var eventName in event) off(events, eventName, event[eventName]);\n      return;\n    }\n\n    var listeners = events[event];\n    if (listeners && listeners.length > 0) {\n      removeListener(listeners, listener);\n      if (listeners.length === 0) delete events[event];\n    }\n\n    function removeListener(listeners, listener) {\n      for (var i = listeners.length - 1; i >= 0; i--) {\n        if (listeners[i] === listener) {\n          listeners.splice(i, 1);\n        }\n      }\n      return listeners;\n    }\n  }\n};"],"file":"index.js","sourceRoot":"/source/"}